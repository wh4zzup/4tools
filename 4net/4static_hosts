#!/bin/bash

# start with sh/bash 4static_hosts; done for static routing by devices/IPs
# with this script you can generate a static hosts name resolution.
#
# this script needs to be run as root or privileged user.
#
# - it can be used with a cronjob but using it manually is recommended.
#
# - it will improve the performance of your internet experience and decrease the net load.
#
# - it will prevent DNS leaks.
#
# - it will prevent injection attempts by nameserver usage if you are using unsafe networks.
#
###########################################################
# /etc/hosts.base is used as basic hosts file and may look as follows (just copy your current /etc/hosts to /etc/hosts.base if you are not sure about the needed entries):

# /etc/hosts: Local Host Database
#
# This file describes a number of aliases-to-address mappings for the for
# local hosts that share this file.
#
# The format of lines in this file is:
#
# IP_ADDRESS	canonical_hostname	[aliases...]
#
#The fields can be separated by any number of spaces or tabs.
#
# In the presence of the domain name service or NIS, this file may not be
# consulted at all; see /etc/host.conf for the resolution order.
#

# IPv4 and IPv6 localhost aliases
#127.0.0.1	localhost
#::1		localhost

#
# Imaginary network.
#10.0.0.2               myname
#10.0.0.3               myfriend
#
# According to RFC 1918, you can use the following IP networks for private
# nets which will never be connected to the Internet:
#
#       10.0.0.0        -   10.255.255.255
#       172.16.0.0      -   172.31.255.255
#       192.168.0.0     -   192.168.255.255
#
# In case you want to be able to connect directly to the Internet (i.e. not
# behind a NAT, ADSL router, etc...), you need real official assigned
# numbers.  Do not try to invent your own network numbers but instead get one
# from your network provider (if any) or from your regional registry (ARIN,
# APNIC, LACNIC, RIPE NCC, or AfriNIC.)
#

# custom entries here
###########################################################

VERSION=0.0.3

# Sort the resolved hostnames by either
# - not used yet and propably useless if your hosts are blocking ping
# - will slowdown the host resolving
# 1 fastest to slowest
# 2 slowest to fastest
# 0 deactivated
if [ ! "$1" = "" ]
then
    sorting=$1
else
    sorting=0
fi

if [ "$EUID" -ne 0 ]
then
    prefix="sudo"
else
    prefix=""
fi

# IPV4 Fraq Improvements
# memory allocation and timing for defragmenting packages - please test for optimal values
# the current settings should speed up the throughput of the ipfrag buffer up to 80M/s
$prefix echo 8388608 > /proc/sys/net/ipv4/ipfrag_high_thresh
$prefix echo 393216 > /proc/sys/net/ipv4/ipfrag_low_thresh
$prefix echo 30 > /proc/sys/net/ipv4/ipfrag_time

# this is the list of hostnames which will be resolved for your hosts config file...
hosts=("hostname1.com", "hostname2.es", "hostname3.fr", "etc.de")

hosts_out=""
$prefix cp -p /etc/hosts /etc/hosts.bak

if [ ! -e /etc/hosts.base ]
then
    $prefix cp -p /etc/hosts/ /etc/hosts.base
    $prefix chmod 600 /etc/hosts.base
fi

$prefix rm /etc/hosts
echo "" > /tmp/hosts_to_update
chmod 600 /tmp/hosts_to_update

for ((z=0; z<${#hosts[@]}; z++))
do
     screen -dmt rs resolveip ${hosts[$z]} | sed -n -e "s/^.* is \(.*\)/\1 ${hosts[$z]}/p" >> /tmp/hosts_to_update
     #echo "" > /tmp/ips_resolve_ranking
     #ips=($(resolveip ${hosts[$z]} | sed -n -e "s/^.* is \(.*\)/\1/p"))
     #for ((i=0; i<${#ips[@]}; i++))
     #do
     #  ping=$(ping -c 1 ${ips[$i]} | grep icmp | sed -n -e "s/^.*[time|Zeit]=\(.*\) ms/\1/p")
     #  echo "$ping ${ips[$i]} ${hosts[$z]}" /tmp/ips_resolve_ranking
     #done
     #ips=(sort -n /tmp/ips_resolve_ranking)
     #for ((i=0; i<$((${#ips[@]}+3)); i=$i+3))
     #do
     #  echo "${ips[$(($i+1))} ${ips[$(($i+2))}" >> /tmp/hosts_to_update
     #done
     sleep 0.1
done

$prefix cat /etc/hosts.base > /etc/hosts
$prefix cat /tmp/hosts_to_update >> /etc/hosts
$prefix chmod 644 /etc/hosts
$prefix rm /tmp/hosts_to_update
